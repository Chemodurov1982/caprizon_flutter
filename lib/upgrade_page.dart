import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

class UpgradePage extends StatefulWidget {
  final String token;

  UpgradePage({required this.token});

  @override
  _UpgradePageState createState() => _UpgradePageState();
}

class _UpgradePageState extends State<UpgradePage> {
  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  bool _available = true;
  bool _restoring = false;
  List<ProductDetails> _products = [];
  final String _monthlyId = 'premium_monthly_v2';
  final String _yearlyId = 'premium_yearly_v2';
  final Set<String> _pendingProductIds = {}; // Track pending product IDs

  @override
  void initState() {
    final purchaseUpdated = _inAppPurchase.purchaseStream;
    purchaseUpdated.listen((purchases) {
      for (var purchase in purchases) {
        print('üõí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏: ${purchase.status}, ID: ${purchase.purchaseID}');

        if (purchase.purchaseID == null) {
          print('‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –±–µ–∑ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${purchase.productID}');
          continue;
        }

        if (purchase.pendingCompletePurchase) {
          print('‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É: ${purchase.productID}');
          _inAppPurchase.completePurchase(purchase);
          continue;
        }

        if (purchase.status == PurchaseStatus.pending) {
          _pendingProductIds.remove(purchase.productID);
        }

        if (purchase.status == PurchaseStatus.purchased) {
          print('‚úÖ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
          _verifyAndUpgrade(purchase);
          _pendingProductIds.remove(purchase.productID);
        }

        if (purchase.status == PurchaseStatus.error || purchase.status == PurchaseStatus.canceled) {
          _pendingProductIds.remove(purchase.productID);
        }
      }
    });
    _initialize();
    super.initState();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    print('üîÑ –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—á–∏—â–∞–µ–º _pendingProductIds');
    _pendingProductIds.clear();
    _inAppPurchase.restorePurchases();
  }

  Future<void> _initialize() async {
    final isAvailable = await _inAppPurchase.isAvailable();
    setState(() => _available = isAvailable);
    print('üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: $isAvailable');
    if (!isAvailable) return;

    const Set<String> _kIds = {'premium_monthly_v2', 'premium_yearly_v2'};
    final ProductDetailsResponse response =
    await _inAppPurchase.queryProductDetails(_kIds);
    if (response.notFoundIDs.isNotEmpty) {
      print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã: ${response.notFoundIDs}');
    }
    setState(() => _products = response.productDetails);
    print('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${_products.map((p) => p.id).toList()}');
  }

  Future<void> _verifyAndUpgrade(PurchaseDetails purchase) async {
    print('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    final receipt = purchase.verificationData.serverVerificationData;
    final productId = purchase.productID;

    if (widget.token.isEmpty) {
      print('üö´ –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')),
      );
      return;
    }

    final response = await http.post(
      Uri.parse('https://caprizon-a721205e360f.herokuapp.com/api/users/upgrade'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ${widget.token}',
      },
      body: jsonEncode({
        'receipt': receipt,
        'productId': productId,
      }),
    );

    print('üîÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}, ${response.body}');

    final data = jsonDecode(response.body);
    if (response.statusCode == 200 && data['success'] == true) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('isPremium', true);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')),
      );
    } else {
      final errorMessage = data['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: $errorMessage')),
      );
    }
  }

  bool _isPurchasePending(String productId) {
    return _pendingProductIds.contains(productId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Upgrade to Premium')),
      body: _available
          ? Column(
        children: [
          Expanded(
            child: ListView(
              children: _products.map((product) {
                return ListTile(
                  title: Text(product.title),
                  subtitle: Text(product.description),
                  trailing: Text(product.price),
                  onTap: () async {
                    print('üëÜ –ù–∞–∂–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞: ${product.id}');

                    if (_isPurchasePending(product.id)) {
                      print('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: ${product.id}');
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è')),
                      );
                      return;
                    }

                    _pendingProductIds.add(product.id);
                    final PurchaseParam purchaseParam =
                    PurchaseParam(productDetails: product);
                    _inAppPurchase.buyNonConsumable(purchaseParam: purchaseParam);
                  },
                );
              }).toList(),
            ),
          ),
          if (_restoring) Padding(
            padding: EdgeInsets.all(8),
            child: CircularProgressIndicator(),
          ),
          ElevatedButton(
            onPressed: () async {
              setState(() => _restoring = true);
              print('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫...');
              await _inAppPurchase.restorePurchases();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ')),
              );
              await Future.delayed(Duration(seconds: 2));
              setState(() => _restoring = false);
            },
            child: Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'),
          ),
        ],
      )
          : Center(child: Text('–ü–æ–∫—É–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')),
    );
  }
}
